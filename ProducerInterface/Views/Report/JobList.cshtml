@using Quartz.Job.Models
@model IEnumerable<Quartz.Job.EDM.jobextend>

@using (Html.BeginForm("AddJob", "Report", FormMethod.Get)) {
    <fieldset>
        <span>Новый отчёт</span>
        @Html.DropDownList("id", EnumHelper.GetSelectList(typeof(Reports)))
        <input id="btn" type="submit" value="Создать" />
    </fieldset>
}
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.CustomName)      
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Scheduler)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReportTypeEnum)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Creator)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastRun)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DisplayStatusEnum)
        </th>
        
    </tr>

    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CustomName)

                <a href="@Url.Action("Edit","Report" , new { jobName = item.JobName, jobGroup = item.JobGroup })" title="Настройки и редактирование параметров отчета"><span class="glyphicon glyphicon-th-list"></span></a>
                <a href="@Url.Action("RunNow","Report" , new { jobName = item.JobName, jobGroup = item.JobGroup })" ><span class="glyphicon glyphicon-play" title="Разовое формирование отчета за истекшие периоды времени и даты"></span></a>
                <a href="@Url.Action("Delete","Report" , new { jobName = item.JobName, jobGroup = item.JobGroup })" ><span class="glyphicon glyphicon-ban-circle" title="Удалить отчет"></span></a>

            </td>
            <td>
                @Html.ActionLink(item.Scheduler, "ScheduleJob", new { jobName = item.JobName, jobGroup = item.JobGroup })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReportTypeEnum)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Creator)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastRun)
            </td>
            <td class="@(item.DisplayStatusEnum == DisplayStatus.Processed ? "processed" : "")" data-url="@(Url.Action("GetDisplayStatusJson", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup }))">
                @if (item.DisplayStatusEnum == DisplayStatus.Ready) 
                {
                    <a href="@Url.Action("DisplayReport", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup })">
                        @Html.DisplayFor(modelItem => item.DisplayStatusEnum)
                    </a>
                }
                else {
                    @Html.DisplayFor(modelItem => item.DisplayStatusEnum)
                }
            </td>
            @*<td>
                @Html.ActionLink("Edit", "Edit", new { jobName = item.JobName, jobGroup = item.JobGroup }) |
                @Html.ActionLink("RunNow", "RunNow", new { jobName = item.JobName, jobGroup = item.JobGroup }) |
                @Html.ActionLink("Delete", "Delete", new { jobName = item.JobName, jobGroup = item.JobGroup })
                @Html.ActionLink("Restore", "Restore", new { jobName = item.JobName, jobGroup = item.JobGroup })
            </td>*@
        </tr>
    }

</table>


@section JavaScript {
<script src="~/Content/Chosen/js/initJobList.js"></script>  
    @*<script type="text/javascript">
        $(function() {
            @foreach (var item in Model) {
                if (item.DisplayStatusEnum == DisplayStatus.Processed) {
                <text>setInterval(ajaxCall(@item.JobName,@item.JobGroup), 5000);</text>
                }
            });
    <script>*@
}


