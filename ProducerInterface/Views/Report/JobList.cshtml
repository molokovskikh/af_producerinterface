@using Quartz.Job.Models
@model IEnumerable<Quartz.Job.EDM.jobextend>


    @using (Html.BeginForm("AddJob", "Report", FormMethod.Get))
    {
        <div class="row">
            @*<div class="col-md-2"><b>Новый отчёт</b></div>*@
            <div class="col-md-4">
                @Html.DropDownList("id", EnumHelper.GetSelectList(typeof(Reports)), new { @class = "form-control" })
            </div>
            <div class="col-md-8">
                <input id="btn" type="submit" value="Создать" class="btn btn-primary"/>
            </div>
        </div>
        <div class="row">&nbsp;</div>
    }

@if (Model != null && Model.Count() > 0) {
<div class="row">
    <div class="col-md-12">
        <h4>Список отчетов</h4>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <table class="table table-striped table-bordered">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.CustomName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Scheduler)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ReportTypeEnum)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Creator)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastRun)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DisplayStatusEnum)
                </th>

            </tr>

            @foreach (var item in Model) {
            <tr>
                <td>
                    <a href="@Url.Action("Delete", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup })"><span class="glyphicon glyphicon-ban-circle" title="Удалить отчет"></span></a>

                    @Html.DisplayFor(modelItem => item.CustomName)
                </td>
                <td>
                    @Html.ActionLink(item.Scheduler, "ScheduleJob", new { jobName = item.JobName, jobGroup = item.JobGroup })
                </td>
                <td>
                    <a href="@Url.Action("Edit", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup })" title="Настройки и редактирование параметров отчета"><span class="glyphicon glyphicon-th-list"></span></a>
                    @Html.DisplayFor(modelItem => item.ReportTypeEnum)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Creator)
                </td>
                <td>
                    <a href="@Url.Action("RunNow", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup })"><span class="glyphicon glyphicon-play" title="Разовое формирование отчета за истекшие периоды времени и даты"></span></a>
                    @Html.DisplayFor(modelItem => item.LastRun)
                </td>
                <td class="@(item.DisplayStatusEnum == DisplayStatus.Processed ? "processed" : "")" data-url="@(Url.Action("GetDisplayStatusJson", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup }))">

                    @if (item.DisplayStatusEnum == DisplayStatus.Ready) {
                    <a href="@Url.Action("DisplayReport", "Report", new { jobName = item.JobName, jobGroup = item.JobGroup })">
                        @Html.DisplayFor(modelItem => item.DisplayStatusEnum)
                    </a>}
                    else {
                    @Html.DisplayFor(modelItem => item.DisplayStatusEnum)
}
                </td>
                @*<td>
                        @Html.ActionLink("Edit", "Edit", new { jobName = item.JobName, jobGroup = item.JobGroup }) |
                        @Html.ActionLink("RunNow", "RunNow", new { jobName = item.JobName, jobGroup = item.JobGroup }) |
                        @Html.ActionLink("Delete", "Delete", new { jobName = item.JobName, jobGroup = item.JobGroup })
                        @Html.ActionLink("Restore", "Restore", new { jobName = item.JobName, jobGroup = item.JobGroup })
                    </td>*@
            </tr>}

        </table>
    </div>
</div>
}
else {
    <hr />
    <div class="row">
        <h4>Отсутствуют отчеты</h4>
    </div>
    }


    @section JavaScript {
        <link href="~/Content/Chosen/css/chosen.css" rel="stylesheet" />
        <script src="~/Content/Chosen/js/chosen.jquery.js"></script>
        <script src="~/Content/Chosen/js/initJobList.js"></script>
        @*<script type="text/javascript">
                $(function() {
                    @foreach (var item in Model) {
                        if (item.DisplayStatusEnum == DisplayStatus.Processed) {
                        <text>setInterval(ajaxCall(@item.JobName,@item.JobGroup), 5000);</text>
                        }
                    });
            <script>*@
    }


